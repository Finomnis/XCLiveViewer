{"version":3,"sources":["ext/GoogleMapsApiLoader.jsx","pages/StatusPages.jsx","pages/LiveMap.jsx","util/EventToReactState.js","location_provider/XContest/XContestSocket.js","location_provider/XContest/XContestInterface.js","pages/PilotSelector.jsx","pages/TitleBar.jsx","MainPage.jsx","App.jsx","serviceWorker.jsx","index.js"],"names":["googleMapsApiPromise","useGoogleMapsApi","useState","ready","error","state","setState","useEffect","Promise","resolve","_reject","console","log","script","document","createElement","src","async","addEventListener","body","appendChild","then","success","window","google","useStyles","makeStyles","theme","progress","margin","spacing","LoadingPage","message","hideIf","subRef","classes","Box","width","height","display","alignItems","justifyContent","ref","textAlign","CircularProgress","className","Typography","ErrorPage","fontSize","color","LiveMap","mapReady","mapError","mapsRef","useRef","map","setMap","useLayoutEffect","maps","Map","current","center","lat","lng","mapTypeId","zoom","disableDefaultUI","scaleControl","fullscreenControl","styles","mapStyle","Fragment","mapEventToState","eventTarget","messageName","initialState","innerState","setInnerState","eventTargetObj","Function","onEvent","data","addListener","removeListener","XContestSocket","onStateChanged","onInfoMessage","onTracklogMessage","onOpen","setConnectionState","ConnectionState","ESTABLISHED","sock","send","JSON","stringify","tag","area","lon","contents","onMessage","msg","ACTIVE","received_msg","parse","clearTimeout","watchdog","setTimeout","this","INACTIVE","onClose","NO_CONNECTION","connect","bind","onError","CONNECTING","WebSocket","onopen","onmessage","onclose","onerror","ERROR","alert","NO_INFORMATION","XContestInterface","onConnectionStateChanged","eventEmitter","emit","onInfoMessageReceived","onTracklogMessageReceived","pilots","shortTracks","EventEmitter","socket","_instance","getXContestInterface","useXContestPilots","useXContestConnectionState","PilotSelector","connectionState","pilotList","length","root","flexGrow","menuButton","marginRight","title","TitleBar","AppBar","position","Toolbar","IconButton","edge","aria-label","variant","Button","MainPage","React","tabId","setTabId","windowHeight","setWindowHeight","updateWindowHeight","innerHeight","removeEventListener","flexDirection","zIndex","clone","disabled","index","boxShadow","BottomNavigation","value","onChange","_event","newValue","showLabels","BottomNavigationAction","label","icon","App","Boolean","location","hostname","match","require","config","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.54f58399.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Hook\nlet googleMapsApiPromise = null;\nfunction useGoogleMapsApi() {\n  // Keeping track of script loaded and error state\n  const [state, setState] = useState({\n    ready: false,\n    error: false\n  });\n\n  useEffect(\n    () => {\n      if (googleMapsApiPromise === null) {\n        googleMapsApiPromise = new Promise((resolve, _reject) => {\n          console.log(\"Loading Google Maps API ...\");\n          // Create script\n          let script = document.createElement(\"script\");\n          script.src =\n            \"https://maps.googleapis.com/maps/api/js?key=\" +\n            process.env.REACT_APP_GAPI_KEY;\n          script.async = true;\n\n          script.addEventListener(\"load\", () => resolve(true));\n          script.addEventListener(\"error\", () => resolve(false));\n\n          // Add script to document body\n          document.body.appendChild(script);\n        });\n      }\n\n      googleMapsApiPromise.then(success => {\n        if (success) {\n          console.log(\"Google Maps API loaded.\");\n          setState({\n            ready: true,\n            error: false\n          });\n        } else {\n          console.log(\"Error: Cannot load Google Maps API.\");\n          setState({\n            ready: false,\n            error: true\n          });\n        }\n      });\n    },\n    [] // Don't re-run\n  );\n\n  return [state.ready, state.error, state.ready ? window.google : null];\n}\n\nexport default useGoogleMapsApi;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2)\n  }\n}));\n\nexport const LoadingPage = ({ message, hideIf, subRef }) => {\n  const classes = useStyles();\n  return (\n    <Box\n      width=\"100%\"\n      height=\"100%\"\n      display={hideIf ? \"none\" : \"flex\"}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      ref={subRef}\n    >\n      <Box textAlign=\"center\">\n        <CircularProgress className={classes.progress} />\n        <Typography>{message}</Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport const ErrorPage = ({ message, hideIf }) => {\n  const classes = useStyles();\n  return (\n    <Box\n      width=\"100%\"\n      height=\"100%\"\n      display={hideIf ? \"none\" : \"flex\"}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box textAlign=\"center\">\n        <ErrorIcon\n          fontSize=\"large\"\n          color=\"error\"\n          className={classes.progress}\n        />\n        <Typography color=\"error\">{message}</Typography>\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useRef, useLayoutEffect } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport useGoogleMapsApi from \"../ext/GoogleMapsApiLoader\";\nimport { LoadingPage, ErrorPage } from \"./StatusPages\";\nimport mapStyle from \"./MapStyle.json\";\n\nconst LiveMap = () => {\n  const [mapReady, mapError, google] = useGoogleMapsApi();\n  const mapsRef = useRef();\n  const [map, setMap] = useState(null);\n\n  // Initialize Map\n  useLayoutEffect(() => {\n    if (mapReady && !map) {\n      setMap(\n        new google.maps.Map(mapsRef.current, {\n          center: { lat: 46.509012, lng: 11.827984 },\n          mapTypeId: \"terrain\",\n          zoom: 12,\n          disableDefaultUI: true,\n          scaleControl: true,\n          fullscreenControl: true,\n          styles: mapStyle\n        })\n      );\n    }\n  }, [mapReady, map, google, mapsRef]);\n\n  return (\n    <React.Fragment>\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        display={mapReady ? \"block\" : \"none\"}\n        ref={mapsRef}\n      ></Box>\n      <LoadingPage\n        message=\"Loading Maps ...\"\n        hideIf={mapReady || mapError}\n      ></LoadingPage>\n      <ErrorPage message=\"Unable to load map!\" hideIf={!mapError}></ErrorPage>\n    </React.Fragment>\n  );\n};\n\nexport default LiveMap;\n","import { useEffect, useState } from \"react\";\n\nexport default function mapEventToState(\n  eventTarget,\n  messageName,\n  initialState\n) {\n  return () => {\n    const [innerState, setInnerState] = useState(initialState);\n\n    useEffect(() => {\n      let eventTargetObj =\n        eventTarget instanceof Function ? eventTarget() : eventTarget;\n\n      const onEvent = data => {\n        setInnerState(data);\n      };\n\n      // Register\n      eventTargetObj.addListener(messageName, onEvent);\n\n      // Unregister on component unmount\n      return () => {\n        eventTargetObj.removeListener(messageName, onEvent);\n      };\n    }, []);\n\n    return innerState;\n  };\n}\n","import { ConnectionState } from \"./XContestInterface\";\n\nexport default class XContestSocket {\n  constructor(onStateChanged, onInfoMessage, onTracklogMessage) {\n    this.setConnectionState = onStateChanged;\n    this.connect();\n  }\n\n  connect() {\n    if (\"WebSocket\" in window) {\n      this.setConnectionState(ConnectionState.CONNECTING);\n      this.sock = new WebSocket(\"wss://live.xcontest.org/websock/webclient\");\n      this.sock.onopen = this.onOpen;\n      this.sock.onmessage = this.onMessage;\n      this.sock.onclose = this.onClose;\n      this.sock.onerror = this.onError;\n    } else {\n      this.setConnectionState(ConnectionState.ERROR);\n      // The browser doesn't support WebSocket\n      alert(\"WebSocket NOT supported by your Browser!\");\n    }\n  }\n\n  onOpen = () => {\n    console.log(\"WS:Open!\");\n    this.setConnectionState(ConnectionState.ESTABLISHED);\n\n    // Set area filter to the entire world\n    this.sock.send(\n      JSON.stringify({\n        tag: \"WebFilterArea\",\n        area: [{ lat: -90, lon: -180 }, { lat: 90, lon: 180 }]\n      })\n    );\n\n    // Use current 'fake' contest that is valid for the current alpha phase.\n    // Primarily sent to match the messages from their reverse engineered websocket\n    this.sock.send(\n      JSON.stringify({ tag: \"WebFilterContest\", contents: \"alpha9999\" })\n    );\n\n    // Tell the webserver which flights we want in more detail. TODO.\n    this.sock.send(JSON.stringify({ tag: \"WebFollow\", contents: [] }));\n  };\n\n  onMessage = msg => {\n    console.log(\"WS:Message!\");\n    this.setConnectionState(ConnectionState.ACTIVE);\n\n    let received_msg = JSON.parse(msg.data);\n    console.log(\"Received: \", received_msg);\n\n    // Expect the next message in 60 seconds. If not, change the status message.\n    clearTimeout(this.watchdog);\n    this.watchdog = setTimeout(function() {\n      this.setConnectionState(ConnectionState.INACTIVE);\n    }, 70000);\n\n    // Send to user\n    //TODO process_msg(received_msg);\n  };\n\n  onClose = msg => {\n    console.log(\"WS:Close!\");\n    this.setConnectionState(ConnectionState.NO_CONNECTION);\n    // websocket is closed.\n    setTimeout(this.connect.bind(this), 3000);\n    console.log(\"Connection is closed.\", msg);\n  };\n\n  onError = msg => {\n    console.log(\"WS:Error!\");\n  };\n}\n","import { EventEmitter } from \"events\";\nimport mapEventToState from \"../../util/EventToReactState\";\nimport XContestSocket from \"./XContestSocket\";\n\nexport const ConnectionState = {\n  CONNECTING: \"connecting\", //orange\n  ERROR: \"error\", //red\n  ESTABLISHED: \"established\", //yellow\n  ACTIVE: \"active\", //green\n  INACTIVE: \"inactive\", //orange\n  NO_CONNECTION: \"no connection\", //red\n  NO_INFORMATION: \"no information\" //gray\n};\n\nclass XContestInterface {\n  constructor() {\n    this.pilots = {};\n    this.shortTracks = {};\n    this.eventEmitter = new EventEmitter();\n    this.socket = new XContestSocket(this.onConnectionStateChanged);\n  }\n\n  onConnectionStateChanged = state => {\n    console.log(\"New connection state: \", state);\n    this.eventEmitter.emit(\"connectionStateChanged\", state);\n  };\n\n  onInfoMessageReceived = state => {};\n\n  onTracklogMessageReceived = state => {};\n}\n\n// Singleton stuff\nlet _instance = null;\nconst getXContestInterface = () => {\n  if (!_instance) {\n    _instance = new XContestInterface();\n  }\n  return _instance;\n};\n\nexport const useXContestPilots = mapEventToState(\n  () => getXContestInterface().eventEmitter,\n  \"pilotStateChanged\",\n  []\n);\n\nexport const useXContestConnectionState = mapEventToState(\n  () => getXContestInterface().eventEmitter,\n  \"connectionStateChanged\",\n  ConnectionState.NO_INFORMATION\n);\n\n// Hook. Fires every time the short tracks list got updated.\nexport const useXContestShortTracks = mapEventToState(\n  () => getXContestInterface().eventEmitter,\n  \"shortTracksChanged\",\n  {}\n);\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\n\nimport {\n  useXContestPilots,\n  useXContestConnectionState\n} from \"../location_provider/XContest/XContestInterface\";\n\nconst PilotSelector = () => {\n  const connectionState = useXContestConnectionState();\n  const pilotList = useXContestPilots();\n  return (\n    <React.Fragment>\n      <Box>State: {connectionState}</Box>\n      <Box>{pilotList.length}</Box>\n    </React.Fragment>\n  );\n};\n\nexport default PilotSelector;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst TitleBar = () => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          News\n        </Typography>\n        <Button color=\"inherit\">Login</Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TitleBar;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\n\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport MapIcon from \"@material-ui/icons/Map\";\n\nimport \"./MainPage.css\";\n\n// TODO import LazyLoading from \"./util/LazyLoading\";\n\nimport LiveMap from \"./pages/LiveMap\";\nimport PilotSelector from \"./pages/PilotSelector\";\nimport TitleBar from \"./pages/TitleBar\";\n\nexport default function MainPage() {\n  const [tabId, setTabId] = React.useState(1);\n  const [windowHeight, setWindowHeight] = React.useState(0);\n\n  // Workaround for mobile screens reporting an incorrect window height\n  const updateWindowHeight = () => {\n    setWindowHeight(window.innerHeight);\n  };\n  React.useLayoutEffect(() => {\n    updateWindowHeight();\n    window.addEventListener(\"resize\", updateWindowHeight);\n    return () => window.removeEventListener(\"resize\", updateWindowHeight);\n  }, []);\n\n  // Callbacks for changing the current page\n  const handleNavigationButton = (_event, newValue) => setTabId(newValue);\n\n  return (\n    <Box height={windowHeight} display=\"flex\" flexDirection=\"column\">\n      <Box zIndex={1}>\n        <TitleBar></TitleBar>\n      </Box>\n      <Box flexGrow={1} clone>\n        <SwipeableViews disabled index={tabId}>\n          <Box width=\"100%\" height=\"100%\">\n            <LiveMap></LiveMap>\n          </Box>\n          <Box width=\"100%\" height=\"100%\">\n            <PilotSelector></PilotSelector>\n          </Box>\n          <Box width=\"100%\" height=\"100%\">\n            Item Three\n          </Box>\n        </SwipeableViews>\n      </Box>\n      <Box zIndex={1} boxShadow={3}>\n        <BottomNavigation\n          value={tabId}\n          onChange={handleNavigationButton}\n          showLabels\n        >\n          <BottomNavigationAction label=\"Map\" icon={<MapIcon />} />\n          <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />\n          <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />\n        </BottomNavigation>\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport MainPage from \"./MainPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Read the .env file\nrequire(\"dotenv\").config();\n\n// Render the page\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}