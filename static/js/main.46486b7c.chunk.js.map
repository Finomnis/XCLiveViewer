{"version":3,"sources":["pages/Map.jsx","MainPage.jsx","App.jsx","serviceWorker.jsx","index.js"],"names":["Map","google","this","props","zoom","onClick","onMarkerClick","name","React","Component","GoogleApiWrapper","apiKey","process","MainPage","useState","tabId","setTabId","windowHeight","setWindowHeight","updateWindowHeight","window","innerHeight","useEffect","addEventListener","removeEventListener","Box","height","display","flexDirection","flexGrow","clone","disabled","index","zIndex","boxShadow","BottomNavigation","value","onChange","_event","newValue","showLabels","BottomNavigationAction","label","icon","App","className","Boolean","location","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mZAGaA,EAAb,iLAEI,OACE,kBAAC,MAAD,CAAMC,OAAQC,KAAKC,MAAMF,OAAQG,KAAM,IACrC,kBAAC,SAAD,CAAQC,QAASH,KAAKI,cAAeC,KAAM,0BAJnD,GAAyBC,IAAMC,WAUhBC,6BAAiB,CAC9BC,OAAQC,2CADKF,CAEZV,GCFY,SAASa,IAAY,IAAD,EACPL,IAAMM,SAAS,GADR,mBAC1BC,EAD0B,KACnBC,EADmB,OAEOR,IAAMM,SAAS,GAFtB,mBAE1BG,EAF0B,KAEZC,EAFY,KAK3BC,EAAqB,WACzBD,EAAgBE,OAAOC,cAEzBb,IAAMc,WAAU,WAGd,OAFAH,IACAC,OAAOG,iBAAiB,SAAUJ,GAC3B,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAKH,OACE,kBAACM,EAAA,EAAD,CAAKC,OAAQT,EAAcU,QAAQ,OAAOC,cAAc,UACtD,kBAACH,EAAA,EAAD,CAAKI,SAAU,EAAGC,OAAK,GACrB,kBAAC,IAAD,CAAgBC,UAAQ,EAACC,MAAOjB,GAC9B,kBAACU,EAAA,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,qBAGJ,kBAACA,EAAA,EAAD,CAAKQ,OAAQ,EAAGC,UAAW,GACzB,kBAACC,EAAA,EAAD,CACEC,MAAOrB,EACPsB,SAhBuB,SAACC,EAAQC,GAAT,OAAsBvB,EAASuB,IAiBtDC,YAAU,GAEV,kBAACC,EAAA,EAAD,CAAwBC,MAAM,MAAMC,KAAM,kBAAC,IAAD,QAC1C,kBAACF,EAAA,EAAD,CAAwBC,MAAM,YAAYC,KAAM,kBAAC,IAAD,QAChD,kBAACF,EAAA,EAAD,CAAwBC,MAAM,SAASC,KAAM,kBAAC,IAAD,WC9CvD,IAQeC,EARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,Q,MCMcC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCXNC,EAAQ,IAAUC,SAGlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46486b7c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map as GMap, Marker, GoogleApiWrapper } from \"google-maps-react\";\n\nexport class Map extends React.Component {\n  render() {\n    return (\n      <GMap google={this.props.google} zoom={14}>\n        <Marker onClick={this.onMarkerClick} name={\"Current location\"} />\n      </GMap>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GAPI_KEY\n})(Map);\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\n\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport MapIcon from \"@material-ui/icons/Map\";\n\nimport \"./MainPage.css\";\n\nimport Map from \"./pages/Map\";\n\nexport default function MainPage() {\n  const [tabId, setTabId] = React.useState(0);\n  const [windowHeight, setWindowHeight] = React.useState(0);\n\n  // Workaround for mobile screens reporting an incorrect window height\n  const updateWindowHeight = () => {\n    setWindowHeight(window.innerHeight);\n  };\n  React.useEffect(() => {\n    updateWindowHeight();\n    window.addEventListener(\"resize\", updateWindowHeight);\n    return () => window.removeEventListener(\"resize\", updateWindowHeight);\n  }, []);\n\n  // Callbacks for changing the current page\n  const handleNavigationButton = (_event, newValue) => setTabId(newValue);\n\n  return (\n    <Box height={windowHeight} display=\"flex\" flexDirection=\"column\">\n      <Box flexGrow={1} clone>\n        <SwipeableViews disabled index={tabId}>\n          <Box>\n            <Map></Map>\n          </Box>\n          <Box>Item Two</Box>\n          <Box>Item Three</Box>\n        </SwipeableViews>\n      </Box>\n      <Box zIndex={1} boxShadow={3}>\n        <BottomNavigation\n          value={tabId}\n          onChange={handleNavigationButton}\n          showLabels\n        >\n          <BottomNavigationAction label=\"Map\" icon={<MapIcon />} />\n          <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />\n          <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />\n        </BottomNavigation>\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport MainPage from \"./MainPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Read the .env file\nrequire(\"dotenv\").config();\n\n// Render the page\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}