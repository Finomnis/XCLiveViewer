{"version":3,"sources":["common/GoogleMapsApiLoader.js","pages/StatusPages.jsx","pages/LiveMap.jsx","util/EventToReactState.js","location_provider/XContest/XContestSocket.js","common/PersistentState.js","location_provider/XContest/XContestAnimation.js","location_provider/XContest/XContestInterface.js","pages/PilotSelector.jsx","pages/Pilots.jsx","pages/TitleBar.jsx","MainPage.jsx","App.jsx","serviceWorker.jsx","index.js"],"names":["googleMapsApiPromise","useGoogleMapsApi","useState","ready","error","state","setState","useEffect","Promise","resolve","_reject","console","log","script","document","createElement","src","async","addEventListener","body","appendChild","then","success","window","google","useStyles","makeStyles","theme","progress","margin","spacing","LoadingPage","message","hideIf","subRef","classes","Box","width","height","display","alignItems","justifyContent","ref","textAlign","CircularProgress","className","Typography","ErrorPage","fontSize","color","LiveMap","mapReady","mapError","mapsRef","useRef","map","setMap","useLayoutEffect","maps","Map","current","center","lat","lng","mapTypeId","zoom","disableDefaultUI","scaleControl","fullscreenControl","styles","mapStyle","Fragment","mapEventToState","eventTarget","messageName","initialState","innerState","setInnerState","eventTargetObj","Function","onEvent","data","addListener","removeListener","XContestSocket","onStateChanged","onInfoMessage","onTracklogMessage","formatSubscribedFlights","startDate","Date","now","setMilliseconds","startIsoDate","toISOString","subscribedFlights","flight","flightUuid","start","setSubscribedFlights","flights","sock","readyState","WebSocket","OPEN","send","JSON","stringify","tag","contents","onOpen","handleReset","setConnectionState","ConnectionState","ESTABLISHED","area","lon","onMessage","evt","ACTIVE","msg","parse","clearTimeout","watchdog","setTimeout","INACTIVE","processMessage","onClose","NO_CONNECTION","connect","bind","onError","dispatchInfoMessage","dispatchTracklogMessage","this","CONNECTING","onopen","onmessage","onclose","onerror","ERROR","alert","persistentChosenPilots","createPersistedState","XContestAnimation","setSubscribedPilots","subscribedPilots","_subscribedPilots","_updateSubscribedFlights","pushNewInfo","pilotInfo","_pilotInfos","pushNewData","trackId","trackData","importantFlights","Object","values","filter","val","info","user","username","flightId","importantFlightSet","Set","as","bs","size","a","has","eqSet","_subscribedFlights","_setSubscribedFlights","_callbacks","localStorage","getItem","Array","from","cb","NO_INFORMATION","XContestInterface","socket","pilots","animation","onConnectionStateChanged","eventEmitter","emit","onInfoMessageReceived","track","overriden","onTracklogMessageReceived","trackChunk","EventEmitter","_instance","getXContestInterface","useXContestPilots","useXContestConnectionState","columns","id","label","minWidth","render","row","fullname","component","variant","style","paddingLeft","align","nationality","iso","marginLeft","boxShadow","verticalAlign","toLowerCase","PilotSelector","props","useTheme","pilotList","selected","setSelected","search","setSearch","numSelected","length","closeWindow","fullScreen","useMediaQuery","breakpoints","down","matchesSearch","name","includes","filteredPilots","userData","test","push","login","gender","Dialog","open","Toolbar","palette","type","secondary","main","backgroundColor","lighten","light","text","primary","dark","paddingRight","paddingTop","TextField","autoFocus","autoComplete","fullWidth","onChange","event","target","value","flex","marginY","overflowY","Table","stickyHeader","TableHead","TableRow","column","TableCell","key","TableBody","isItemSelected","indexOf","isSelected","itemDisabled","alreadyAdded","wasAlreadyAdded","columnContent","onClick","_event","selectedIndex","newSelected","concat","slice","handleClick","DialogActions","Button","disabled","onAddPilots","Pilots","pilotSelectorOpen","setPilotSelectorOpen","chosenPilots","setChosenPilotsPersistent","setChosenPilots","pilotIds","newPilotState","changed","pilotId","useChosenPilots","addPilots","removePilots","content","entries","pilotName","displayedName","position","bottom","right","Fab","keys","menuButton","marginRight","popover","padding","LoadingBadge","Badge","anchorOrigin","vertical","horizontal","badgeContent","disableShrink","thickness","children","TitleBar","connectionState","connectionPopAnchor","setConnectionPopAnchor","AppBar","clone","IconButton","edge","flexGrow","currentTarget","renderConnectionIcon","Popover","Boolean","anchorEl","transformOrigin","MainPage","React","tabId","setTabId","windowHeight","setWindowHeight","updateWindowHeight","innerHeight","removeEventListener","flexDirection","zIndex","index","BottomNavigation","newValue","showLabels","BottomNavigationAction","icon","App","location","hostname","match","require","config","ReactDOM","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.48a71950.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Hook\nlet googleMapsApiPromise = null;\nfunction useGoogleMapsApi() {\n  // Keeping track of script loaded and error state\n  const [state, setState] = useState({\n    ready: false,\n    error: false\n  });\n\n  useEffect(\n    () => {\n      if (googleMapsApiPromise === null) {\n        googleMapsApiPromise = new Promise((resolve, _reject) => {\n          console.log(\"Loading Google Maps API ...\");\n          // Create script\n          let script = document.createElement(\"script\");\n          script.src =\n            \"https://maps.googleapis.com/maps/api/js?key=\" +\n            process.env.REACT_APP_GAPI_KEY;\n          script.async = true;\n\n          script.addEventListener(\"load\", () => resolve(true));\n          script.addEventListener(\"error\", () => resolve(false));\n\n          // Add script to document body\n          document.body.appendChild(script);\n        });\n      }\n\n      googleMapsApiPromise.then(success => {\n        if (success) {\n          console.log(\"Google Maps API loaded.\");\n          setState({\n            ready: true,\n            error: false\n          });\n        } else {\n          console.log(\"Error: Cannot load Google Maps API.\");\n          setState({\n            ready: false,\n            error: true\n          });\n        }\n      });\n    },\n    [] // Don't re-run\n  );\n\n  return [state.ready, state.error, state.ready ? window.google : null];\n}\n\nexport default useGoogleMapsApi;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2)\n  }\n}));\n\nexport const LoadingPage = ({ message, hideIf, subRef }) => {\n  const classes = useStyles();\n  return (\n    <Box\n      width=\"100%\"\n      height=\"100%\"\n      display={hideIf ? \"none\" : \"flex\"}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      ref={subRef}\n    >\n      <Box textAlign=\"center\">\n        <CircularProgress className={classes.progress} />\n        <Typography>{message}</Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport const ErrorPage = ({ message, hideIf }) => {\n  const classes = useStyles();\n  return (\n    <Box\n      width=\"100%\"\n      height=\"100%\"\n      display={hideIf ? \"none\" : \"flex\"}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box textAlign=\"center\">\n        <ErrorIcon\n          fontSize=\"large\"\n          color=\"error\"\n          className={classes.progress}\n        />\n        <Typography color=\"error\">{message}</Typography>\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useRef, useLayoutEffect } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport useGoogleMapsApi from \"../common/GoogleMapsApiLoader\";\nimport { LoadingPage, ErrorPage } from \"./StatusPages\";\nimport mapStyle from \"./MapStyle.json\";\n\nconst LiveMap = () => {\n  const [mapReady, mapError, google] = useGoogleMapsApi();\n  const mapsRef = useRef();\n  const [map, setMap] = useState(null);\n\n  // Initialize Map\n  useLayoutEffect(() => {\n    if (mapReady && !map) {\n      setMap(\n        new google.maps.Map(mapsRef.current, {\n          center: { lat: 46.509012, lng: 11.827984 },\n          mapTypeId: \"terrain\",\n          zoom: 12,\n          disableDefaultUI: true,\n          scaleControl: true,\n          fullscreenControl: true,\n          styles: mapStyle\n        })\n      );\n    }\n  }, [mapReady, map, google, mapsRef]);\n\n  return (\n    <React.Fragment>\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        display={mapReady ? \"block\" : \"none\"}\n        ref={mapsRef}\n      ></Box>\n      <LoadingPage\n        message=\"Loading Maps ...\"\n        hideIf={mapReady || mapError}\n      ></LoadingPage>\n      <ErrorPage message=\"Unable to load map!\" hideIf={!mapError}></ErrorPage>\n    </React.Fragment>\n  );\n};\n\nexport default LiveMap;\n","import { useEffect, useState } from \"react\";\n\nexport default function mapEventToState(\n  eventTarget,\n  messageName,\n  initialState\n) {\n  return () => {\n    const [innerState, setInnerState] = useState(initialState);\n\n    useEffect(() => {\n      let eventTargetObj =\n        eventTarget instanceof Function ? eventTarget() : eventTarget;\n\n      const onEvent = data => {\n        setInnerState(data);\n      };\n\n      // Register\n      eventTargetObj.addListener(messageName, onEvent);\n\n      // Unregister on component unmount\n      return () => {\n        eventTargetObj.removeListener(messageName, onEvent);\n      };\n    }, []);\n\n    return innerState;\n  };\n}\n","import { ConnectionState } from \"./XContestInterface\";\n\nexport default class XContestSocket {\n  constructor(onStateChanged, onInfoMessage, onTracklogMessage) {\n    this.setConnectionState = onStateChanged;\n    this.dispatchInfoMessage = onInfoMessage;\n    this.dispatchTracklogMessage = onTracklogMessage;\n    this.subscribedFlights = [];\n    this.connect();\n  }\n\n  connect() {\n    if (\"WebSocket\" in window) {\n      this.setConnectionState(ConnectionState.CONNECTING);\n      this.sock = new WebSocket(\"wss://live.xcontest.org/websock/webclient\");\n      this.sock.onopen = this.onOpen;\n      this.sock.onmessage = this.onMessage;\n      this.sock.onclose = this.onClose;\n      this.sock.onerror = this.onError;\n    } else {\n      this.setConnectionState(ConnectionState.ERROR);\n      // The browser doesn't support WebSocket\n      alert(\"WebSocket NOT supported by your Browser!\");\n    }\n  }\n\n  formatSubscribedFlights = () => {\n    // TODO add setting for track length\n    const startDate = new Date(Date.now() - 1000 * 60 * 15);\n\n    startDate.setMilliseconds(0);\n    const startIsoDate = startDate.toISOString();\n\n    const formattedFlights = this.subscribedFlights.map(flight => {\n      return { flightUuid: flight, start: startIsoDate };\n    });\n\n    return formattedFlights;\n  };\n\n  setSubscribedFlights = flights => {\n    this.subscribedFlights = flights;\n\n    if (this.sock.readyState === WebSocket.OPEN) {\n      this.sock.send(\n        JSON.stringify({\n          tag: \"WebFollow\",\n          contents: this.formatSubscribedFlights()\n        })\n      );\n    }\n  };\n\n  onOpen = () => {\n    this.handleReset();\n    console.log(\"WebSocket: Open!\");\n    this.setConnectionState(ConnectionState.ESTABLISHED);\n\n    // Set area filter to the entire world\n    this.sock.send(\n      JSON.stringify({\n        tag: \"WebFilterArea\",\n        area: [{ lat: -90, lon: -180 }, { lat: 90, lon: 180 }]\n      })\n    );\n\n    // Use current 'fake' contest that is valid for the current alpha phase.\n    // Primarily sent to match the messages from their reverse engineered websocket\n    this.sock.send(\n      JSON.stringify({ tag: \"WebFilterContest\", contents: \"alpha9999\" })\n    );\n\n    // Tell the webserver which flights we want in more detail. TODO.\n    this.sock.send(\n      JSON.stringify({\n        tag: \"WebFollow\",\n        contents: this.formatSubscribedFlights()\n      })\n    );\n  };\n\n  onMessage = evt => {\n    console.log(\"WebSocket: Message!\");\n    this.setConnectionState(ConnectionState.ACTIVE);\n\n    let msg = JSON.parse(evt.data);\n\n    // Expect the next message in 60 seconds. If not, change the status message.\n    clearTimeout(this.watchdog);\n    this.watchdog = setTimeout(() => {\n      this.setConnectionState(ConnectionState.INACTIVE);\n    }, 70000);\n\n    // Process the message\n    this.processMessage(msg);\n  };\n\n  onClose = evt => {\n    console.log(\"WebSocket: Close!\");\n    this.setConnectionState(ConnectionState.NO_CONNECTION);\n    // websocket is closed.\n    setTimeout(this.connect.bind(this), 1000);\n  };\n\n  onError = evt => {\n    console.log(\"WebSocket: Error!\");\n  };\n\n  // Message Processing\n  handleReset = () => {\n    console.log(\"TODO: handle reset!\");\n  };\n  processMessage = msg => {\n    if (!(\"tag\" in msg)) {\n      console.log(\"Warning: Invalid message format!\", msg);\n      return;\n    }\n    switch (msg.tag) {\n      case \"LiveFlightInfos\":\n        this.dispatchInfoMessage(msg.contents);\n        break;\n      case \"LiveFlightChunk\":\n        this.dispatchTracklogMessage(msg);\n        break;\n      default:\n        console.log(`Warning: Unknown message tag '${msg.tag}'!`, msg);\n    }\n  };\n}\n","import createPersistedState from \"use-persisted-state\";\nimport { getXContestInterface } from \"../location_provider/XContest/XContestInterface\";\n\nconst persistentChosenPilots = createPersistedState(\"chosen-pilots\");\n\nexport function getChosenPilots() {\n  return JSON.parse(localStorage.getItem(\"chosen-pilots\"));\n}\n\nexport function useChosenPilots() {\n  //TODO replace with persistant storage\n  const [chosenPilots, setChosenPilotsPersistent] = persistentChosenPilots({});\n\n  const setChosenPilots = pilots => {\n    // Explicitely tell XContestInterface, as it is not a Component and cannot use hooks\n    getXContestInterface().setSubscribedPilots(pilots);\n    setChosenPilotsPersistent(pilots);\n  };\n\n  // Add new pilots\n  const addPilots = pilotIds => {\n    const newPilotState = { ...chosenPilots };\n\n    let changed = false;\n    for (const pilotId of pilotIds) {\n      if (!(pilotId in newPilotState)) {\n        newPilotState[pilotId] = null;\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      setChosenPilots(newPilotState);\n    }\n  };\n\n  // Remove pilots\n  const removePilots = pilotIds => {\n    const newPilotState = { ...chosenPilots };\n\n    let changed = false;\n    for (const pilotId of pilotIds) {\n      if (pilotId in newPilotState) {\n        delete newPilotState[pilotId];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      setChosenPilots(newPilotState);\n    }\n  };\n\n  return [chosenPilots, addPilots, removePilots];\n}\n","import { getChosenPilots } from \"../../common/PersistentState\";\n\nfunction eqSet(as, bs) {\n  if (as.size !== bs.size) return false;\n  for (var a of as) if (!bs.has(a)) return false;\n  return true;\n}\n\nexport default class XContestAnimation {\n  constructor(setSubscribedFlights) {\n    this._callbacks = [];\n    this._subscribedPilots = getChosenPilots();\n    this._subscribedFlights = new Set();\n    this._pilotInfos = {};\n    this._setSubscribedFlights = flights => {\n      this._subscribedFlights = flights;\n      setSubscribedFlights(Array.from(flights));\n    };\n  }\n\n  // External\n  setSubscribedPilots = subscribedPilots => {\n    this._subscribedPilots = subscribedPilots;\n    this._updateSubscribedFlights();\n  };\n  pushNewInfo = pilotInfo => {\n    console.log(\"newInfo: \", pilotInfo);\n    this._pilotInfos = pilotInfo;\n    this._updateSubscribedFlights();\n  };\n  pushNewData = (trackId, trackData) => {\n    console.log(\"newTrackdata: \", trackId, trackData);\n  };\n\n  // callback gets called every frame with new data\n  registerCallback(cb) {}\n  unregisterCallback(cb) {}\n\n  // Internal\n  _updateSubscribedFlights = () => {\n    let importantFlights = Object.values(this._pilotInfos)\n      .filter(val => val.info.user.username in this._subscribedPilots)\n      .map(val => val.flightId);\n\n    let importantFlightSet = new Set(importantFlights);\n\n    if (!eqSet(importantFlightSet, this._subscribedFlights)) {\n      console.log(\"Swap: \", importantFlightSet, this._subscribedFlights);\n      this._setSubscribedFlights(importantFlightSet);\n    }\n  };\n}\n","import { EventEmitter } from \"events\";\nimport mapEventToState from \"../../util/EventToReactState\";\nimport XContestSocket from \"./XContestSocket\";\nimport XContestAnimation from \"./XContestAnimation\";\n\nexport const ConnectionState = {\n  CONNECTING: \"connecting\", //orange\n  ERROR: \"error\", //red\n  ESTABLISHED: \"established\", //yellow\n  ACTIVE: \"active\", //green\n  INACTIVE: \"inactive\", //orange\n  NO_CONNECTION: \"no connection\", //red\n  NO_INFORMATION: \"no information\" //gray\n};\n\nclass XContestInterface {\n  constructor() {\n    this.pilots = [];\n    this.eventEmitter = new EventEmitter();\n    this.socket = new XContestSocket(\n      this.onConnectionStateChanged,\n      this.onInfoMessageReceived,\n      this.onTracklogMessageReceived\n    );\n    this.animation = new XContestAnimation(this.setSubscribedFlights);\n  }\n\n  setSubscribedFlights = flights => {\n    this.socket.setSubscribedFlights(flights);\n  };\n\n  setSubscribedPilots = pilots => {\n    this.animation.setSubscribedPilots(pilots);\n  };\n\n  onConnectionStateChanged = state => {\n    this.eventEmitter.emit(\"connectionStateChanged\", state);\n  };\n\n  onInfoMessageReceived = msg => {\n    console.log(msg);\n    this.pilots = {};\n    for (const [trackId, track] of msg) {\n      // Skip if we have a newer track of the same person\n      if (track.overriden) continue;\n\n      track.flightId = trackId;\n\n      this.pilots[track.info.user.username] = track;\n    }\n    this.eventEmitter.emit(\"pilotStateChanged\", this.pilots);\n    this.animation.pushNewInfo(this.pilots);\n  };\n\n  onTracklogMessageReceived = msg => {\n    console.log(\"Trackog Message: \", msg);\n    this.animation.pushNewData(msg.flightUuid, msg.trackChunk);\n  };\n}\n\n// Singleton stuff\nlet _instance = null;\nexport const getXContestInterface = () => {\n  if (!_instance) {\n    _instance = new XContestInterface();\n  }\n  return _instance;\n};\n\nexport const useXContestPilots = mapEventToState(\n  () => getXContestInterface().eventEmitter,\n  \"pilotStateChanged\",\n  []\n);\n\nexport const useXContestConnectionState = mapEventToState(\n  () => getXContestInterface().eventEmitter,\n  \"connectionStateChanged\",\n  ConnectionState.NO_INFORMATION\n);\n","import React from \"react\";\nimport {\n  Box,\n  useMediaQuery,\n  useTheme,\n  Typography,\n  Toolbar\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\n\nimport { lighten } from \"@material-ui/core/styles\";\nimport { Button, Dialog, DialogActions, TextField } from \"@material-ui/core\";\n\nimport {\n  Table,\n  TableBody,\n  TableHead,\n  TableRow,\n  TableCell\n} from \"@material-ui/core\";\n\nimport { useXContestPilots } from \"../location_provider/XContest/XContestInterface\";\n\nconst columns = [\n  {\n    id: \"name\",\n    label: \"Name\",\n    minWidth: 0,\n    render: row => {\n      return (\n        <React.Fragment>\n          {row.user.fullname}\n          <Typography\n            component=\"span\"\n            variant=\"caption\"\n            color=\"textSecondary\"\n            style={{ paddingLeft: \".3em\" }}\n          >\n            [{row.user.username}]\n          </Typography>\n        </React.Fragment>\n      );\n    }\n  },\n  {\n    id: \"country\",\n    label: \"Country\",\n    minWidth: \"4em\",\n    align: \"right\",\n    render: row => {\n      return (\n        <React.Fragment>\n          {row.user.nationality.iso}\n          <Box\n            fontSize=\"large\"\n            marginLeft=\"4px\"\n            boxShadow={1}\n            style={{ verticalAlign: \"middle\" }}\n            className={\n              \"flag-icon flag-icon-\" + row.user.nationality.iso.toLowerCase()\n            }\n          ></Box>\n        </React.Fragment>\n      );\n    }\n  }\n];\n\nfunction createPlaceholderPilot(name) {\n  return {\n    info: {\n      user: {\n        login: null,\n        username: name,\n        fullname: \"Offline User\",\n        gender: \"-\",\n        nationality: { iso: \"--\", name: \"--\" }\n      },\n      flightId: null\n    }\n  };\n}\n\nconst PilotSelector = props => {\n  const theme = useTheme();\n  const pilotList = useXContestPilots();\n\n  // State\n  const [selected, setSelected] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const numSelected = selected.length;\n\n  const closeWindow = () => {\n    // Reset state\n    setSearch(\"\");\n    setSelected([]);\n    props.onClose();\n  };\n\n  const handleClick = (_event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  const isSelected = name => selected.indexOf(name) !== -1;\n  const wasAlreadyAdded = name => props.alreadyAdded.indexOf(name) !== -1;\n  const matchesSearch = name => {\n    if (search === \"\") {\n      return true;\n    }\n    return name.toLowerCase().includes(search.toLowerCase());\n  };\n\n  // Create virtual pilot if nobody found\n  let filteredPilots = Object.values(pilotList).filter(userData => {\n    return (\n      matchesSearch(userData.info.user.username) ||\n      matchesSearch(userData.info.user.fullname)\n    );\n  });\n\n  // Add dummy pilot if list is empty and search string is valid\n  if (filteredPilots.length === 0 && !/\\s/.test(search) && search.length > 0) {\n    filteredPilots.push(createPlaceholderPilot(search));\n  }\n\n  return (\n    <Dialog open={props.open} onClose={closeWindow} fullScreen={fullScreen}>\n      <Toolbar\n        style={\n          numSelected === 0\n            ? {}\n            : theme.palette.type === \"light\"\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n              }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark\n              }\n        }\n      >\n        {numSelected > 0 ? (\n          <Typography component=\"div\" color=\"inherit\" variant=\"subtitle1\">\n            {numSelected} selected\n          </Typography>\n        ) : (\n          <Typography component=\"div\" variant=\"h6\" id=\"tableTitle\">\n            Add new pilots:\n          </Typography>\n        )}\n      </Toolbar>\n      <Box paddingLeft=\"1em\" paddingRight=\"1em\" paddingTop=\"4px\">\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          autoComplete=\"off\"\n          variant=\"outlined\"\n          id=\"search_field\"\n          label=\"Search\"\n          type=\"search\"\n          fullWidth\n          onChange={event => setSearch(event.target.value)}\n        />\n      </Box>\n      <Box flex=\"1 1 auto\" marginY=\"8px\" style={{ overflowY: \"auto\" }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                  component=\"th\"\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredPilots.map(row => {\n              const username = row.info.user.username;\n\n              const isItemSelected = isSelected(username);\n\n              const itemDisabled = wasAlreadyAdded(username);\n              const style = itemDisabled\n                ? { filter: \"grayscale(100%) opacity(30%)\" }\n                : {};\n\n              const columnContent = columns.map(column => {\n                return (\n                  <TableCell key={column.id} align={column.align}>\n                    <Box style={style}>{column.render(row.info)}</Box>\n                  </TableCell>\n                );\n              });\n\n              if (itemDisabled) {\n                return <TableRow key={username}>{columnContent}</TableRow>;\n              }\n\n              return (\n                <TableRow\n                  key={username}\n                  selected={isItemSelected}\n                  onClick={event => handleClick(event, username)}\n                >\n                  {columnContent}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Box>\n      <DialogActions>\n        <Button onClick={closeWindow} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          disabled={numSelected === 0}\n          onClick={() => {\n            props.onAddPilots(selected);\n            closeWindow();\n          }}\n          color=\"primary\"\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default PilotSelector;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Fab } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Box from \"@material-ui/core/Box\";\nimport PilotSelector from \"./PilotSelector\";\nimport { useChosenPilots } from \"../common/PersistentState\";\n\nconst Pilots = () => {\n  const theme = useTheme();\n  const [pilotSelectorOpen, setPilotSelectorOpen] = useState(false);\n\n  const [pilots, addPilots, removePilots] = useChosenPilots();\n\n  // TODO sort pilots\n\n  const content = Object.entries(pilots).map(([pilotId, pilotName]) => {\n    let displayedName = pilotName;\n    if (pilotName === null) {\n      displayedName = pilotId;\n    }\n    return (\n      <Box key={pilotId} onClick={() => removePilots([pilotId])}>\n        {displayedName}\n      </Box>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <Box height=\"100%\" style={{ overflowY: \"auto\" }}>\n        {content}\n      </Box>\n\n      <Box\n        position=\"absolute\"\n        bottom={theme.spacing(2)}\n        right={theme.spacing(2)}\n      >\n        <Fab\n          size=\"small\"\n          color=\"primary\"\n          onClick={() => setPilotSelectorOpen(true)}\n        >\n          <AddIcon />\n        </Fab>\n      </Box>\n      <PilotSelector\n        open={pilotSelectorOpen}\n        onClose={() => setPilotSelectorOpen(false)}\n        onAddPilots={addPilots}\n        alreadyAdded={Object.keys(pilots)}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Pilots;\n","import React from \"react\";\nimport { useState } from \"react\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Popover from \"@material-ui/core/Popover\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Badge from \"@material-ui/core/Badge\";\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ErrorIcon from \"@material-ui/icons/ErrorRounded\";\nimport SignalCellular4BarIcon from \"@material-ui/icons/SignalCellular4Bar\";\nimport SignalCellularConnectedNoInternet4BarIcon from \"@material-ui/icons/SignalCellularConnectedNoInternet4Bar\";\nimport SignalCellularNullIcon from \"@material-ui/icons/SignalCellularNull\";\n\nimport { useXContestConnectionState } from \"../location_provider/XContest/XContestInterface\";\nimport { ConnectionState } from \"../location_provider/XContest/XContestInterface\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  popover: {\n    padding: theme.spacing(1),\n    align: \"right\"\n  }\n}));\n\nconst LoadingBadge = props => {\n  return (\n    <Badge\n      //overlap=\"circle\"\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\"\n      }}\n      badgeContent={\n        <CircularProgress\n          disableShrink={props.disableShrink}\n          color=\"secondary\"\n          size={15}\n          thickness={10}\n        />\n      }\n    >\n      {props.children}\n    </Badge>\n  );\n};\n\nconst TitleBar = () => {\n  const classes = useStyles();\n  const connectionState = useXContestConnectionState();\n\n  const [connectionPopAnchor, setConnectionPopAnchor] = useState(null);\n\n  const renderConnectionIcon = () => {\n    switch (connectionState) {\n      case ConnectionState.ACTIVE:\n        return <SignalCellular4BarIcon />;\n      case ConnectionState.CONNECTING:\n        return (\n          <LoadingBadge>\n            <SignalCellularNullIcon />\n          </LoadingBadge>\n        );\n      case ConnectionState.ERROR:\n        return <ErrorIcon color=\"error\" />;\n      case ConnectionState.ESTABLISHED:\n        return (\n          <LoadingBadge disableShrink>\n            <SignalCellularNullIcon />\n          </LoadingBadge>\n        );\n      case ConnectionState.INACTIVE:\n        return <SignalCellularConnectedNoInternet4BarIcon />;\n      case ConnectionState.NO_CONNECTION:\n        return <SignalCellularNullIcon />;\n      default:\n        return <SignalCellularNullIcon />;\n    }\n  };\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Box clone>\n            <IconButton\n              className={classes.menuButton}\n              edge=\"start\"\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n          </Box>\n\n          <Box flexGrow={1} clone>\n            <Typography variant=\"h6\">XC Live Viewer</Typography>\n          </Box>\n\n          <IconButton\n            edge=\"end\"\n            color=\"inherit\"\n            onClick={event => setConnectionPopAnchor(event.currentTarget)}\n          >\n            {renderConnectionIcon()}\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Popover\n        open={Boolean(connectionPopAnchor)}\n        anchorEl={connectionPopAnchor}\n        onClose={() => setConnectionPopAnchor(null)}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\"\n        }}\n      >\n        <Box className={classes.popover}>\n          <Typography>{connectionState}</Typography>\n        </Box>\n      </Popover>\n    </div>\n  );\n};\n\nexport default TitleBar;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\n\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport MapIcon from \"@material-ui/icons/Map\";\n\nimport \"./MainPage.css\";\n\n// TODO import LazyLoading from \"./util/LazyLoading\";\n\nimport LiveMap from \"./pages/LiveMap\";\nimport Pilots from \"./pages/Pilots\";\nimport TitleBar from \"./pages/TitleBar\";\n\nexport default function MainPage() {\n  const [tabId, setTabId] = React.useState(1);\n  const [windowHeight, setWindowHeight] = React.useState(0);\n\n  // Workaround for mobile screens reporting an incorrect window height\n  const updateWindowHeight = () => {\n    setWindowHeight(window.innerHeight);\n  };\n  React.useLayoutEffect(() => {\n    updateWindowHeight();\n    window.addEventListener(\"resize\", updateWindowHeight);\n    return () => window.removeEventListener(\"resize\", updateWindowHeight);\n  }, []);\n\n  // Callbacks for changing the current page\n  const handleNavigationButton = (_event, newValue) => setTabId(newValue);\n\n  return (\n    <Box height={windowHeight} display=\"flex\" flexDirection=\"column\">\n      <Box zIndex={100}>\n        <TitleBar></TitleBar>\n      </Box>\n      <Box flexGrow={1} clone>\n        <SwipeableViews disabled index={tabId}>\n          <Box width=\"100%\" height=\"100%\" position=\"relative\">\n            <LiveMap></LiveMap>\n          </Box>\n          <Box width=\"100%\" height=\"100%\" position=\"relative\">\n            <Pilots></Pilots>\n          </Box>\n          <Box width=\"100%\" height=\"100%\" position=\"relative\">\n            Item Three\n          </Box>\n        </SwipeableViews>\n      </Box>\n      <Box zIndex={100} boxShadow={3}>\n        <BottomNavigation\n          value={tabId}\n          onChange={handleNavigationButton}\n          showLabels\n        >\n          <BottomNavigationAction label=\"Map\" icon={<MapIcon />} />\n          <BottomNavigationAction label=\"Pilots\" icon={<PeopleIcon />} />\n          <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />\n        </BottomNavigation>\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport MainPage from \"./MainPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport \"flag-icon-css/css/flag-icon.min.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Read the .env file\nrequire(\"dotenv\").config();\n\n// Render the page\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}